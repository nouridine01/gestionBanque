package com.uqac.controllers;

import javafx.fxml.FXML;
//import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
//import javafx.scene.Parent;
//import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
//import javafx.scene.control.ContentDisplay;
import javafx.scene.control.TextField;
//import javafx.scene.image.ImageView;
//import javafx.stage.Stage;

//import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import com.uqac.App;
import com.uqac.dao.UserDao;
import com.uqac.entities.User;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;

public class LoginController implements Initializable{
	String view;
	String titre;
	@FXML
	private TextField login;
	@FXML
	private TextField pwd;
	@FXML
	private Button sign;
	
	@FXML
	private Button quitter;

	@FXML
	public void quitter(ActionEvent event) {
		App.exit();
	}
	
	// Event Listener on Button[#sign].onAction
	@FXML
	public void signin(ActionEvent event) {
		// TODO Autogenerated
	
		//UserDao dao = new UserDao();
		User u = UserDao.connexion(login.getText(), pwd.getText());
		if(u != null) {
			if(u.getRole().equals("ADMIN")) {
				App app = new App();
				view="AccueilAdmin";
				titre="ADMIN";
				app.changeView(view, titre);
			}else {
				App app = new App();
				view="AccueilAgent";
				titre="AGENT";
				app.changeView(view, titre);
			}
		}else {
		   Alert info = new Alert(AlertType.ERROR);
           info.setTitle("info de connexion");
           info.setHeaderText("veuillez saisir des identifiants valide");
           info.showAndWait();
		}
		
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		sign.setDisable(true);
		/*ImageView image = new ImageView(getClass().getResource("/images/cancel.png").toExternalForm());
		quitter.setGraphic(image);
		quitter.setContentDisplay(ContentDisplay.CENTER);
		quitter.setPrefSize(28,25);*/
		login.textProperty().addListener(new ChangeListener<String>() {

			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				// TODO Auto-generated method stub
				if(!"".equals(newValue)  && !"".equals(pwd.getText())){
					sign.setDisable(false);
				}else{
					sign.setDisable(true);
				}
			}
		});
		
		pwd.textProperty().addListener(new ChangeListener<String>() {

			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				// TODO Auto-generated method stub
				if(!"".equals(newValue) && !"".equals(login.getText())){
					sign.setDisable(false);
				}else{
					sign.setDisable(true);
				}
			}
		});
	}
}
