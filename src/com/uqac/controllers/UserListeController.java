package com.uqac.controllers;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import java.net.URL;
//import java.time.Instant;
import java.time.LocalDate;
//import java.time.ZoneId;
//import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;

import com.uqac.App;
import com.uqac.dao.UserDao;
import com.uqac.entities.User;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.MenuItem;

import javafx.scene.control.PasswordField;
import javafx.scene.control.SelectionMode;
//import javafx.scene.control.SingleSelectionModel;
import javafx.scene.control.TableView;

import javafx.scene.control.DatePicker;
//import javafx.scene.control.Alert;
import javafx.scene.control.Button;
//import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ChoiceBox;

import javafx.scene.control.TableColumn;

public class UserListeController implements Initializable{
	private String view;
	private String titre;
	private static UserDao dao = new UserDao();
	private static  User userSelected=new User();
	@FXML
	private MenuItem listerUser;
	@FXML
	private MenuItem listerImmobilier;
	@FXML
	private MenuItem logout;
	@FXML
	private TableView<User> table;
	@FXML
	private TableColumn<User,String> nom;
	@FXML
	private TableColumn<User,String> prenom;
	@FXML
	private TableColumn<User,String> telephone;
	@FXML
	private TableColumn<User,String> email;
	@FXML
	private TableColumn<User,Date> date_naiss;
	@FXML
	private TableColumn<User,String> adresse;
	@FXML
	private TableColumn<User,String> role;
	@FXML
	private TableColumn<User,String> login;
	@FXML
	private TableColumn<User,String> password;
	@FXML
	private TextField nomf;
	@FXML
	private TextField prenomf;
	@FXML
	private TextField telephonef;
	@FXML
	private TextField emailf;
	@FXML
	private DatePicker date_naissf;
	@FXML
	private TextField adressef;
	@FXML
	private ChoiceBox rolef;
	@FXML
	private TextField loginf;
	@FXML
	private PasswordField passwordf;
	@FXML
	private Button add;
	@FXML
	private Button update;
	@FXML
	private Button delete;
	@FXML
	private TextField mc;
	@FXML
	private Button recherche;
	@FXML
	private Button init;

	// Event Listener on MenuItem[#listerUser].onAction
	@FXML
	public void listerUser(ActionEvent event) {
		// TODO Autogenerated
		App app = new App();
		view="UserListe";
		titre="USER-LISTE";
		app.changeView(view, titre);
	}
	// Event Listener on MenuItem[#listerImmobilier].onAction
	@FXML
	public void listerImmobilier(ActionEvent event) {
		// TODO Autogenerated
		App app = new App();
		view="ImmobilierListe";
		titre="IMMOBILIER-LISTE";
		app.changeView(view, titre);
	}
	// Event Listener on MenuItem[#logout].onAction
	@FXML
	public void logout(ActionEvent event) {
		App app = new App();
		view="Login";
		titre="LOGIN";
		app.changeView(view, titre);
	}
	
	@FXML
	public void add(ActionEvent event) {
		// TODO Autogenerated
		User user = recupererChamp();
		dao.create(user);
		viderChamp();
		etatButtons(true);
		initTable(1,"");
		userSelected=null;
		
	}
	
	@FXML
	public void update(ActionEvent event) {
		// TODO Autogenerated
		User user = recupererChamp();
		user.setId(userSelected.getId());
		dao.update(user);
		viderChamp();
		etatButtons(true);
		initTable(1,"");
		userSelected=null;
	}
	
	@FXML
	public void delete(ActionEvent event) {
		// TODO Autogenerated
		User user = new User();
		user.setId(userSelected.getId());
		dao.delete(user);
		viderChamp();
		etatButtons(true);
		initTable(1,"");
		userSelected=null;
	}
	
	@FXML
	public void recherche(ActionEvent event) {
		// TODO Autogenerated
		String mcl= mc.getText();
		if(!mcl.isEmpty()) {			
			initTable(2,mcl);
		}else {
			initTable(1,"");
		}
		
	}
	@FXML
	public void init(ActionEvent event) {
		viderChamp();
		userSelected=null;
		etatButtons(true);
	}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		//remplir le tableau
		initTable(1,"");
		initRole();
		etatButtons(true);
		date_naissf.setValue(LocalDate.now());
		table.getSelectionModel().selectedItemProperty().addListener(
	            (observable, oldValue, newValue) -> {
	           userSelected =(User) table.getSelectionModel().getSelectedItem();
	           /*Alert info = new Alert(AlertType.INFORMATION);
	           info.setTitle("super");
	           info.setHeaderText("identifiant :"+userSelected.getId());
	           info.showAndWait();*/     
	           
	           if(userSelected!=null) {
	        	   etatButtons(false);
	        	   remplirChamp();
	           }
	           
	            	
	      });
		
		
	}
	
	private void initTable(int typeListe,String mcl) {
		table.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
		List<User> users ;
		ObservableList<User> liste;
		if(typeListe==1) {
			users = dao.findAll();
			liste = FXCollections.observableArrayList(users);
		}else {
			users = dao.chercher(mcl);
			liste = FXCollections.observableArrayList(users);
		}
		table.setItems(liste);
		nom.setCellValueFactory(new PropertyValueFactory<>("nom"));
		prenom.setCellValueFactory(new PropertyValueFactory<>("prenom"));
		telephone.setCellValueFactory(new PropertyValueFactory<>("telephone"));
		email.setCellValueFactory(new PropertyValueFactory<>("email"));
		date_naiss.setCellValueFactory(new PropertyValueFactory<>("date_naiss"));
		adresse.setCellValueFactory(new PropertyValueFactory<>("adresse"));
		role.setCellValueFactory(new PropertyValueFactory<>("role"));
		login.setCellValueFactory(new PropertyValueFactory<>("login"));
		password.setCellValueFactory(new PropertyValueFactory<>("password"));
	}
	
	public void initRole() {
		ObservableList<String> roles = FXCollections.observableArrayList();
		roles.addAll("choisissez un rôle","ADMIN","MANAGER");
		rolef.setItems(roles);
	}
	
	private void etatButtons(Boolean b) {
		update.setDisable(b);
		delete.setDisable(b);
	}
	
	private void remplirChamp() {

		/*nomf.textProperty().set(userSelected.getNom());
		prenomf.textProperty().set(userSelected.getPrenom());

		telephonef.textProperty().set(userSelected.getTelephone());
		//emailf.textProperty().set(userSelected.getEmail());
		date_naissf.setValue(Instant.ofEpochMilli(userSelected.getDate_naiss().getTime())
			      .atZone(ZoneId.systemDefault())
			      .toLocalDate());
		adressef.textProperty().set(userSelected.getAdresse());
		rolef.setValue(userSelected.getRole());
		loginf.textProperty().set(userSelected.getLogin());
		passwordf.textProperty().set(userSelected.getPassword());*/
	}
	
	private void viderChamp() {
		nomf.textProperty().set("");
		prenomf.textProperty().set("");
		telephonef.textProperty().set("");
		emailf.textProperty().set("");
		rolef.setValue("choisissez un rôle");
		date_naissf.setValue(LocalDate.now());
		adressef.textProperty().set("");
		loginf.textProperty().set("");
		passwordf.textProperty().set("");
	}
	
	private User recupererChamp() {
		User user = new User();

		/*user.setNom(nomf.getText());
		user.setPrenom(prenomf.getText());

		user.setTelephone(telephonef.getText());
		//user.setEmail(emailf.getText());
		user.setDate_naiss(java.sql.Date.valueOf(date_naissf.getValue()));
		user.setAdresse(adressef.getText());
		user.setRole(rolef.getValue().toString());
		user.setLogin(loginf.getText());
		user.setPassword(passwordf.getText());*/
		return user;
	}
}
